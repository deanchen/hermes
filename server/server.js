// Generated by CoffeeScript 1.3.1
(function() {
  var PORT, async, cache, client, formatJson, http, pair, redis, respond, reverse, termClient, url, _;

  PORT = 4000;

  http = require('http');

  url = require('url');

  redis = require('redis');

  async = require('async');

  _ = require('underscore');

  client = redis.createClient(6400, '127.0.0.1');

  client.select(0);

  termClient = redis.createClient(6400, '127.0.0.1');

  termClient.select(1);

  cache = {};

  http.createServer(function(req, httpRes) {
    var args, terms, termsKey, _ref;
    req = url.parse(req.url, true);
    if (req.pathname === '/') {
      terms = (_ref = req.query.q) != null ? _ref.split(' ') : void 0;
      termsKey = "c:" + terms.join('|');
      args = [termsKey, terms.length];
      args = args.concat(terms);
      if (cache[termsKey]) {
        respond(httpRes, cache[termsKey]);
        return;
      }
      return async.waterfall([
        function(cb) {
          return client.zunionstore(args, function(err, res) {
            return cb(err);
          });
        }, function(cb) {
          return async.parallel([
            function(cb2) {
              return client.zrevrange(termsKey, 0, 4, 'withscores', function(err, topIds) {
                return cb2(err, pair(topIds));
              });
            }, function(cb2) {
              return client.del(termsKey, cb2);
            }
          ], function(err, res) {
            return cb(err, res[0]);
          });
        }, function(array, cb) {
          return async.map(array, function(row, cb2) {
            var id;
            id = parseInt(row[0], 10);
            return termClient.hget(Math.round(id / 1024), id % 1024, function(err, res) {
              row[0] = res;
              return cb2(err, row);
            });
          }, cb);
        }, function(rows, cb) {
          var content;
          content = JSON.stringify(formatJson(rows));
          respond(httpRes, content);
          cache[termsKey] = content;
          args = _.flatten(reverse(rows));
          args.unshift(termsKey);
          return client.zadd(args, function(err, res) {
            return cb(err);
          });
        }
      ], function(err, res) {
        if (err) {
          return console.log("error: " + err);
        }
      });
    } else {
      return httpRes.end();
    }
  }).listen(PORT, '0.0.0.0');

  console.log('Server running on port ' + PORT);

  formatJson = function(array) {
    return array.map(function(el) {
      return JSON.parse(el[0]);
    });
  };

  respond = function(res, content) {
    res.writeHead(200, {
      'Content-Type': 'application/json'
    });
    return res.end(content);
  };

  pair = function(array) {
    var x, _i, _ref, _results;
    _results = [];
    for (x = _i = 0, _ref = array.length - 1; _i <= _ref; x = _i += 2) {
      _results.push([array[x], array[x + 1]]);
    }
    return _results;
  };

  reverse = function(array) {
    return array.map(function(el) {
      return [el[1], el[0]];
    });
  };

}).call(this);
