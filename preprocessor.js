// Generated by CoffeeScript 1.3.1
(function() {
  var MIN_COMPLETE, STOP_WORDS, args, client, fs, index, lazy, path, prefix, redis, type;

  fs = require('fs');

  lazy = require('lazy');

  redis = require('redis');

  MIN_COMPLETE = 2;

  STOP_WORDS = fs.readFileSync('stop-words.txt', 'ascii').split('\n');

  console.log(STOP_WORDS);

  args = process.argv.splice(2);

  type = args[0];

  path = args[1];

  client = redis.createClient();

  client.flushall();

  index = 0;

  new lazy(fs.createReadStream(path, {
    encoding: 'ascii'
  })).lines.map(String).forEach(function(line) {
    console.log(prefix(line));
    console.log(JSON.stringify({
      id: index++,
      term: line
    }));
  });

  prefix = function(phrase) {
    return phrase.toLowerCase().replace('/[^a-z2-9/ig', '').trim().split(' ').filter(function(word) {
      return !~STOP_WORDS.indexOf(word);
    }).map(function(word) {
      var _i, _ref, _ref1, _results;
      return (function() {
        _results = [];
        for (var _i = _ref = MIN_COMPLETE - 1, _ref1 = word.length - 1; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; _ref <= _ref1 ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this).map(function(length) {
        return word.slice(0, length + 1 || 9e9);
      });
    }).reduce(function(acc, prefixes) {
      return acc.concat(prefixes);
    }).unique();
  };

  Array.prototype.unique = function() {
    var key, output, value, _i, _ref, _results;
    output = {};
    for (key = _i = 0, _ref = this.length; 0 <= _ref ? _i < _ref : _i > _ref; key = 0 <= _ref ? ++_i : --_i) {
      output[this[key]] = this[key];
    }
    _results = [];
    for (key in output) {
      value = output[key];
      _results.push(value);
    }
    return _results;
  };

}).call(this);
