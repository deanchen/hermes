// Generated by CoffeeScript 1.3.1
(function() {
  var MIN_COMPLETE, STOP_WORDS, THROTTLE, args, buffer, client, commitLine, fs, index, lazy, path, prefix, readLines, redis, stream, type;

  fs = require('fs');

  lazy = require('lazy');

  redis = require('redis');

  MIN_COMPLETE = 2;

  STOP_WORDS = fs.readFileSync('stop-words.txt', 'ascii').split('\n');

  THROTTLE = 200;

  args = process.argv.splice(2);

  type = args[0];

  path = args[1];

  client = redis.createClient();

  client.flushall();

  index = 1;

  buffer = [];

  stream = fs.createReadStream(path, {
    encoding: 'ascii'
  });

  commitLine = function(line, i) {
    if (line === "0") {
      return client.quit();
    }
    prefix(line).forEach(function(p) {
      return client.sadd(type + ":" + p, i);
    });
    client.hset("soulmate-data:" + type, i, JSON.stringify({
      id: i,
      term: line
    }));
    if (i % 10000 === 0) {
      return console.log(i);
    }
  };

  prefix = function(phrase) {
    return phrase.toLowerCase().replace('/[^a-z0-9/ig', '').trim().split(' ').filter(function(word) {
      return !~STOP_WORDS.indexOf(word);
    }).map(function(word) {
      var _i, _ref, _ref1, _results;
      return (function() {
        _results = [];
        for (var _i = _ref = MIN_COMPLETE - 1, _ref1 = word.length - 1; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; _ref <= _ref1 ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this).map(function(length) {
        return word.slice(0, length + 1 || 9e9);
      });
    }).reduce(function(acc, prefixes) {
      return acc.concat(prefixes);
    }).unique();
  };

  readLines = function(input, cb) {
    var id;
    id = 1;
    buffer = '';
    input.on('data', function(data) {
      var line, _results;
      buffer += data;
      index = buffer.indexOf('\n');
      _results = [];
      while (index > -1) {
        line = buffer.substring(0, index);
        buffer = buffer.substring(index + 1);
        cb(line, id++);
        _results.push(index = buffer.indexOf('\n'));
      }
      return _results;
    });
    return input.on('end', function() {
      if (buffer.length > 0) {
        return cb(buffer, id++);
      }
    });
  };

  setInterval(function() {
    stream.pause();
    return setTimeout(function() {
      return stream.resume();
    }, THROTTLE);
  }, 1000);

  Array.prototype.unique = function() {
    var key, output, value, _i, _ref, _results;
    output = {};
    for (key = _i = 0, _ref = this.length; 0 <= _ref ? _i < _ref : _i > _ref; key = 0 <= _ref ? ++_i : --_i) {
      output[this[key]] = this[key];
    }
    _results = [];
    for (key in output) {
      value = output[key];
      _results.push(value);
    }
    return _results;
  };

  readLines(stream, commitLine);

}).call(this);
